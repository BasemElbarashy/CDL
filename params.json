{
  "name": "CDL: A Framework for Learning Algorithms and Generating Subproblems from Few Examples",
  "tagline": "by Basem G. El-Barashy",
  "body": "# Common-Description Learning (CDL)\r\nThis is a new framework to learn simples patterns from a few number of examples and use them to learn harder ones. the learned models are perfectly interpretable and its depth depends on the question. What is meant by depth here is that\r\nwhenever needed, the model learns to break down the problem into simpler subproblems\r\nand solves them using previously learned models, CDL is written in C++ and tested on 32 small datasets\r\n\r\nThe paper can be found at: arxiv..   \r\n\r\n\r\nGroup_B (dataset_2): Three one-digit numbers addition\r\n---------------------\r\n![example1](GifFiles/Group_B_dataset_2.gif)\r\n\r\n<br><br><br>\r\n\r\n(dataset_19): Reverse task Group_A\r\n---------------------\r\n![example2](GifFiles/Group_A_dataset_19.gif)\r\n\r\n<br><br><br>\r\n\r\nGroup_B (dataset_3)\r\n---------------------\r\n![example2](GifFiles/Group_B_dataset_3.gif)\r\n\r\n<br><br><br>\r\n\r\nGroup_A (dataset_24): Comparing One Digit Numbers\r\n---------------------\r\n![example2](GifFiles/Group_A_dataset_24.gif)\r\n\r\nDirectories\r\n-----------------------------------\r\n`src/`       - source files\r\n\r\n`dataset/`   - dataset divided into three groups (Group_A: 25 small datasets, Group_B: 5 small datasets,Group_C: 2 small datasets)   \r\n\r\n`experiments/`   \r\n* 3 outputFiles: contain MGICDs learned in each group of datasets and some statistics about training\r\n* 32 animation files that explain how MGICD solve the test questions, they can be shown by running `animate.py` but need first to to change the directory of the animation file in the first line. you can also change the animation speed by changing the value of nodeTime. Tested on Python 3\r\n* Most of CDs in the outputFiles can be displayed by `visualizeCD.py`, but it need first to be copied in CD.dat\r\n\r\n\r\nInstallation on Linux\r\n---------------------\r\n```\r\n$ make\r\n$ ./runner\r\n```\r\nUsage\r\n---------------------\r\nYou can edit `Driver.cpp` to learn datasets in Group_A, Group_B or Group_C. For example, to learn the first dataset in  Group_A write this in main():\r\n```C++\r\n    IOH.loadDatasetsAndQuestionsFromFile(\"dataset/Group_A.dat\");\r\n    Constants::redirectStdoutToOutputFile = true;  //redirect stdout to OutputFile.txt\r\n    setHyperParameters(1,2,1,2,7,0,0,1);           //set hyperparamters for the 25 dataset in file Group_A.dat\r\n    TE.learnAndTest(0);                            //learn & test the first Dataset in file Group_A.dat\r\n```\r\nThe results and learned models will be save in `OutputFile.txt`.\r\nTo learn all the datasets in Group_A: \r\n```C++\r\n    IOH.loadDatasetsAndQuestionsFromFile(\"dataset/Group_A.dat\");\r\n    Constants::redirectStdoutToOutputFile = true;  //redirect stdout to OutputFile.txt\r\n    setHyperParameters(1,2,1,2,7,0,0,1);           //set hyperparamters for the 25 dataset in file Group_A.dat\r\n    TE.learnAndTest();                             //learn & test all Datasets in file Group_A.dat\r\n```\r\nYou can also write a new dataset and test it but it must be formatted like other datasets\r\n\r\nLicense\r\n---------------------\r\nThis project is licensed under the terms of the MIT license\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}